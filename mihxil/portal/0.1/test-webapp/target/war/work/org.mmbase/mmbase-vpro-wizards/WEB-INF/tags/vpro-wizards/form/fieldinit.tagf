<%--
    This file contains all the default attributes and derives reasonalbe values
    from environment and attributes.

    action, modifier, actionnr, nodenr, nodetype, fieldname, field, defaultvalue
--%>

<%@ attribute name="action" description="can be [Node|Relation|CheckboxRelation]]"%>
<%@ attribute name="modifier" description="can be [create|update]"%>
<%@ attribute name="actionnr" description="represents the number under which this action is stored in the relevant actions map. It is the key."%>
<%@ attribute name="nodenr" description="represents the number of a real node. using this you can edit any node"%>
<%@ attribute name="nodetype" description="when action is create this is used to get (mmbase) fieldinfo values"%>
<%@ attribute name="fieldname" description="override the default mmbase gui field name"%>
<%@ attribute name="field" required="true" description="which field?"%>
<%@ attribute name="defaultvalue" description="when action is 'create' this will be the value"%>
<%@ attribute name="id" description="set your own id for this field. This can be handy when you pull external nodes into the form (creating a separate action, you also have to set nodenr and actionr). By setting the id you can later us it in createrelation. For fields of the current node in the editor you dont have to set it, becouse it is set by the container."  %>
<%--
    now resolve the actual values
--%>

<%-- 
    By default we set a flag to indicate that an editable field is part of the form
    This is noticed by the surrounding container, and the cancle/save buttons are 
    displayed. It is implemented as a counter, and fields that have a non-editable implementation
    (like showfield) should substract 1.
    they should simpy do this by including the form:noedit tag
--%>
    <c:choose>
        <c:when test="${empty requestScope.___editablefields}">
            <c:set var="___editablefields" scope="request" value="1" />
        </c:when>
        <c:otherwise>
            <c:set var="___editablefields" scope="request" value="${requestScope.___editablefields + 1}" />
        </c:otherwise>
    </c:choose>

<mm:log>************************************</mm:log>
<mm:log>fied: ${field} - nodenr: ${nodenr} - relationid: ${relationid} - nodetype: ${nodetype} - action: ${action} - actionnr: ${actionnr} - modifier: ${modifier} - param.create: ${param.create}</mm:log>

<mm:cloud >

    <%--
        modifier:
        if there is no nodenumber or there is a create param, the modifier is create.
        the create parameter is used in the related page, where the nodenr the base node is, where the 'current' node
        is related to
    --%>
    <c:if test="${empty modifier}">
        <c:choose>
            <c:when test="${empty nodenr || (not empty param.create) || (not empty param.search)}"><c:set var="modifier" value="create"/></c:when>
            <c:otherwise><c:set var="modifier" value="update"/></c:otherwise>
        </c:choose>
    </c:if>
    <mm:log>modifier: ${modifier}</mm:log>

    <%--  action:  --%>
    <c:if test="${empty action}"><c:set var="action" value="Node"/></c:if>
    <mm:log>action: ${action}</mm:log>



    <%--now determin the actual node we are editing --%>
    <c:if test="${modifier == 'update'}">
        <c:choose>
            <c:when test="${action == 'Node'}">
                <%--when there is a parameter 'editnodenr' (related page) then that is the node we are editing --%>
                <c:choose>
                    <c:when test="${not empty param.editnodenr}"><c:set var="currentnode" value="${param.editnodenr}"/></c:when>
                    <c:otherwise> <c:set var="currentnode" value="${nodenr}"/> </c:otherwise>
                </c:choose>
            </c:when>
            <c:when test="${action == 'Relation' || action == 'CheckboxRelation'}">
                <c:set var="currentnode" value="${relationid}"></c:set>
            </c:when>
        </c:choose>
        <c:if test="${empty currentnode}"><util:throw message="modifier is update en action is [${action}] maar kon geen huidige node vaststellen"/></c:if>
    </c:if>
    <mm:log>currentnode:${currentnode}</mm:log>



    <%--  actionnr  --%>
    <c:if test="${empty actionnr}">
        <c:choose>
            <c:when test="${modifier == 'create'}">
                <c:choose>
                    <c:when test="${action != 'Node'}">
                        <c:set var="actionnr" value="${relationid}" />
                    </c:when>
                    <c:otherwise>
                        <%--when creating a new node the actionnr is empty--%>
                    </c:otherwise>
                </c:choose>
            </c:when>
            <c:otherwise>
                <c:set var="actionnr" value="${currentnode}"/>
            </c:otherwise>
        </c:choose>
    </c:if>
    <mm:log>actionnr: ${actionnr}</mm:log>



    <%--  fieldname  --%>
    <c:if test="${empty fieldname}">
        <c:choose>
            <c:when test="${not empty nodetype}">
                <mm:fieldlist nodetype="${nodetype}" fields="${field}">
                    <c:set var="fieldname"><mm:fieldinfo type="guiname"/></c:set>
                </mm:fieldlist>
            </c:when>
            <c:otherwise>
                <util:throw message="veld: ${field}.Kan fieldname niet bepalen: geen parameter, geen nodetype"/>
            </c:otherwise>
        </c:choose>
    </c:if>
    <mm:log>fieldname: ${fieldname}</mm:log>



    <%--  fieldvalue --%>
    <%--
        when there is a node use that, otherwise use defaultvalue
        when the field is bynary (the check sucks, needs to be done proper) don't load the blob into the fieldvalue field
    --%>
    <c:choose>
        <c:when test="${field != 'handle'}">
            <c:choose>
                <c:when test="${not empty currentnode}">
                    <mm:node number="${currentnode}">
                        <c:set var="fieldvalue"><mm:field name="${field}" escape="none"/></c:set>
                    </mm:node>
                </c:when>
                <c:otherwise>
                    <c:set var="fieldvalue" value="${defaultvalue}" />
                </c:otherwise>
            </c:choose>
        </c:when>
        <c:otherwise>
            <mm:import id="fieldvalue" reset="true">[binary]</mm:import>
            <c:set var="fieldvalue" value="[binary]" />
        </c:otherwise>
    </c:choose>

    <mm:log>fieldvalue: ${fieldvalue}</mm:log>



    <%--  guitype (can be used to obtain a resourcebundel in mmbase 1.7)--%>
    <mm:fieldlist nodetype="${nodetype}" fields="${field}">
        <c:set var="guitype"><mm:fieldinfo type="guitype"/></c:set>
    </mm:fieldlist>
    <mm:log>guitype: ${guitype}</mm:log>



    <%--  if there is no nodetype and nodenr is empty: error--%>
    <c:if test="${empty nodenr && empty nodetype}">
        <util:throw message="both nodenr and nodetype are empyt on tag for field ${field}"/>
    </c:if>

    <%--
        when the id is explicitely set, i assume this field is part of a different action than the default one
        so let's set the id and nodetype or this action
    --%>
    <c:if test="${not empty id}">
        <input type="hidden" name="${modifier}${action}Actions[${actionnr}].id" value="new"/>
        <input type="hidden" name="${modifier}${action}Actions[${actionnr}].type" value="${nodetype}"/>
    </c:if>

</mm:cloud>

