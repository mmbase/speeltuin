/*

This software is OSI Certified Open Source Software.
OSI Certified is a certification mark of the Open Source Initiative.

The license (Mozilla version 1.0) can be read at the MMBase site.
See http://www.MMBase.org/license

*/
package org.mmbase.webservice;

import java.util.*;
import java.net.*;
import org.mmbase.util.*;
import org.mmbase.util.xml.*;
import org.mmbase.util.logging.*;
import org.mmbase.security.*;
import org.w3c.dom.*;
import java.lang.reflect.*;

import org.mmbase.util.functions.*;

/**
 * The WebServiceRepository singleton is responsible for which WebService are available. WebServices may be executed by {@link WebServiceServlet}.
 *
 * @author Michiel Meeuwissen
 * @version $Id$
 */
public class WebServiceRepository {


    public static final String XSD_WEBSERVICE = "webservices.xsd";
    public static final String NAMESPACE_WEBSERVICE = "http://www.mmbase.org/xmlns/webservices";

    static {
        org.mmbase.util.xml.EntityResolver.registerSystemID(NAMESPACE_WEBSERVICE + ".xsd", XSD_WEBSERVICE, WebServiceRepository.class);
    }

    private static final Logger log = Logging.getLoggerInstance(WebServiceRepository.class);

    private static final WebServiceRepository repository = new WebServiceRepository();


    public static WebServiceRepository getInstance() {
        return repository;
    }
    static {
        // Run configuration in a seperate thread, because this code may be triggered by configuration of ComponentRepository
        // but can most of the time only succeed if ComponentRepository is _ready_.
        ThreadPools.jobsExecutor.execute(new Runnable() {
                public void run() {
                    ResourceWatcher rw = new ResourceWatcher() {
                            public void onChange(String r) {
                                getInstance().readConfiguration(r);
                            }
                        };
                    rw.add("webservices.xml");
                    rw.onChange();
                    rw.setDelay(2 * 1000); // 2 s
                    rw.start();
                }
            });

    }

    private final Map<String, Map<WebService.Type, WebService>> rep = new TreeMap<String, Map<WebService.Type, WebService>>();

    private WebServiceRepository() { }

    /**
     * The available webservices.
     */
    public Collection<Map<WebService.Type, WebService>> getWebServices() {
        return Collections.unmodifiableCollection(rep.values());
    }

    /**
     * An (unmodifiable) map representing the complete repository
     */
    public Map<String, Map<WebService.Type, WebService>> toMap()  {
        return Collections.unmodifiableMap(rep);
    }

    /**
     * Acquires the webservice with given name, or <code>null</code> if no such webservice
     */
    public WebService getWebService(String name, WebService.Type type) {
        Map<WebService.Type, WebService> enumMap = rep.get(name);
        if (enumMap == null) {
            return null;
        } else {
            return enumMap.get(type);
        }
    }

    public void shutdown() {
        clear();
    }
    protected void clear() {
        rep.clear();
    }

    /**
     * Reads all component xmls
     */
    protected void readConfiguration(String resource) {
        clear();

        ResourceLoader loader =  ResourceLoader.getConfigurationRoot();
        List<URL> urls = new ArrayList<URL>(loader.getResourceList(resource));
        Collections.reverse(urls);
        for (URL url : urls) {
            try {
                if (url.openConnection().getDoInput()) {
                    log.info("Parsing " + url);
                    Document doc = ResourceLoader.getDocument(url, true, getClass());
                    Element documentElement = doc.getDocumentElement();

                    String webservicesName = documentElement.getAttribute("name");

                    org.mmbase.security.ActionRepository.getInstance().fillFromXml(documentElement, webservicesName);

                    NodeList wsElements = documentElement.getElementsByTagName("webservice");
                    for (int i = 0; i < wsElements.getLength(); i++) {
                        Element element = (Element) wsElements.item(i);
                        String name = element.getAttribute("name");
                        WebService.Type type = WebService.Type.valueOf(element.getAttribute("type"));
                        Object object  = Instantiator.getInstance(element);
                        WebService ws;
                        if (object instanceof WebService) {
                            ws = (WebService) object;
                        } else {
                            String method = element.getAttribute("method");
                            if ("".equals(method)) method = name;
                            // Finding the  methods to be used.
                            Method useMethod = null;
                            for (Method m : object.getClass().getMethods()) {
                                String methodName = m.getName();
                                if (methodName.equals(method)) {
                                    if (useMethod != null) {
                                        log.warn("More methods with name " + methodName);
                                    } else {
                                        useMethod = m;
                                    }
                                }
                            }
                            Function fun;
                            if (useMethod.getParameterTypes().length == 0) {
                                fun = new BeanFunction(object, method);
                            } else {
                                fun = new MethodFunction(useMethod, object);
                            }
                            ws = new AnyFunctionWebService(fun);
                        }
                        String action = element.getAttribute("action");
                        if (action.length() > 0) {
                            String[] a = action.split(":", 2);
                            ws.setAction(ActionRepository.getInstance().get(a[0], a[1]));
                        }
                        ws.getDescription().setKey(name);
                        ws.getDescription().fillFromXml("description", element);

                        log.info("Found " + name + " " + type + " " + ws);
                        Map<WebService.Type, WebService> enumMap = rep.get(name);
                        if (enumMap == null) {
                            enumMap = new EnumMap<WebService.Type, WebService>(WebService.Type.class);
                            rep.put(name, enumMap);
                        }
                        WebService prev = enumMap.put(type, ws);
                        if (prev != null) {
                            log.service("Replaced " + prev + " with " + ws);
                        }
                    }
                } else {
                    log.debug("" + url + " does not exist");
                }
            } catch (ClassNotFoundException cnfe) {
                log.error("For " + url + ": " + cnfe.getClass() + " " + cnfe.getMessage());
            } catch (Throwable e) {
                log.error("For " + url + ": " + e.getMessage(), e);
            }

        }
    }

}
