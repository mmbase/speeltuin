<!--
  This is a sample complete component configuration file. The settings here
  are not used in code, but they could (you can experiment with them).

  The configuration file consists of the following elements:
  - a 'component' main element with the following properties:
    - name: the name of the component. This must match the 'name'
      field of a component object in the cloud
    - templatepath: the path in which the templates are located, 
      for the emailcomponent this would be 'email'
    - templatebar: one of 'provider' or 'education'. Defines in
      which bar a link to the component is placed
    - barposition: integer defining the location in the bar, 
      small numbers are on the left, large numbers on the right
  - 'scope' elements define a scope in which the component can be
    active. The following scopes are possible:
    - component: the main one, where you can define settings and default values. 
    - providers
    - educations
    - classes
    - people
    A scope can have a 'referid' value that will be used in a JSP
    page to find the value for a setting. 
    Within a scope you can refer to settings defined in another
    scope.
  - 'setting' elements that define a setting. There are 4 possible types:
    - string, free text
    - integer, free integer
    - boolean, true or false
    - domain, one of a list of (string) options.
    You can specify a default value
-->
<component name="core" templatepath="" templatebar="" barposition="10">
  <scope name="component" referid="component">
    <!-- Some example settings with different types 
    <setting name="integersetting" type="integer" default="0" />
    <setting name="domainsetting" type="domain" default="option1">
      <option name="option1" />
      <option name="option2" />
      <option name="option3" />
    </setting>
    <setting name="booleansetting" type="boolean" default="true"/>
    <setting name="stringsetting" type="string" />
  -->
  </scope>
  <scope name="providers" referid="provider">
    <!-- reference back on provider level to settings defined on component level
    <setting ref="integersetting" />
    <setting ref="domainsetting" />
    <setting ref="booleansetting" />
    -->
  </scope>
  <scope name="educations" referid="education">
    <!-- reference back on education level to settings defined on component level
    <setting ref="integersetting" />
    <setting ref="domainsetting" />
    <setting ref="booleansetting" />
    -->
  </scope>
  <scope name="classes" referid="class">
    <!-- reference back on class level to settings defined on component level
    <setting ref="integersetting" />
    <setting ref="domainsetting" />
    <setting ref="booleansetting" />
    -->
  </scope>
  <scope name="people" referid="user">
    <!--
      Example of a setting on user-level; look at the 'email' component for a real-life example
      <setting name="isnice" type="boolean" default="false" />
    -->
  </scope>
</component>
