package org.mmbase.applications.friendlylink;

import java.util.*;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.mmbase.bridge.*;
import org.mmbase.util.logging.Logger;
import org.mmbase.util.logging.Logging;
import org.mmbase.module.core.MMBaseContext;

/**
 * Converts urls using the utility classes provided per nodetype and the caches
 *
 * TODO: Create a method to be called at initialization of webapp to fill the cache with links
 * 
 * @author Andr&eacute; vanToly &lt;andre@toly.nl&gt;
 * @version $Id$
 */
public class UrlConverter {

    private static final Logger log = Logging.getLoggerInstance(UrlConverter.class);
	
	public static String URL_CACHE = "url_cache";
	
	/**
	 * Gets and initiaties the cache to store flinks, it uses MMBaseContext to get
	 * the ServletContext
	 *
	 * @return UrlCache
	 */
	protected static UrlCache getCache() {
	    MMBaseContext mc = new MMBaseContext();
	    ServletContext app = mc.getServletContext();
	    UrlCache cache = (UrlCache) app.getAttribute(URL_CACHE);
	    if (cache == null) {
	        cache = new UrlCache();
	        app.setAttribute(URL_CACHE, cache);
	    }
	    return cache;
	}
/*    
    protected Map<String, FriendlyLink> getFlinks() {
        Map<String, FriendlyLink> flinks = new HashMap<String, FriendlyLink>();
        flinks = UrlFilter.getFriendlylinks();
        return flinks;
    }
*/    
    /**
     * Called by UrlFilter passing the HttpServletRequest with the 
     * 'userfriendly' URL to be converted to a technical URL.
     *
     * @param  HttpServletRequest
     * @return the converted technical URL
     */
    public static String convertUrl(HttpServletRequest request) {
        String contextpath = request.getContextPath();
        String url = getPath(request);
        String params = request.getQueryString();
        return convertUrl(contextpath, url, params);
    }

    /**
    * Converts a 'userfriendly' URL into a technical URL (like f.e. 'index.jsp').
    * It first consults the cache, if not found consults the map with FriendlyLinks to 
    * try to map the friendlylink to a jsp.
    *
    * @param contextpath the webapp context
    * @param flink       contains the URL to be converted
    * @param params      contains the requestparameters of the URL
    * @return            the converted URL or the original URL if it could not be converted or found.
    */
	public static String convertUrl(String contextpath, String flink, String params) {
	    // params is to remove the found page parameter from the string
	    if (log.isDebugEnabled()) log.debug("Converting friendlylink '" + flink + "' with params '" + params + "' and context: " + contextpath);
	    
	    StringBuffer jspurl = new StringBuffer();
	    // jspurl.append(contextpath).append(flink);
	    jspurl.append(flink);
        if (params != null) jspurl.append("?").append(params);
	    
	    UrlCache cache = getCache();
	    if (log.isDebugEnabled()) log.debug("Checking if friendlylink '" + flink +"' lives in the cache.");
	    if ( cache.hasURLEntry(flink) ) {
	        if (log.isDebugEnabled()) log.debug("URL was cached");

	        jspurl = new StringBuffer( cache.getJSPEntry(flink) );  // get its jspUrl
	        if (params != null) jspurl.append("&").append(params);
    	    
	    } else {    
	        if (log.isDebugEnabled()) log.debug("URL not cached");
	        
	        Map<String, FriendlyLink> friendlylinks = UrlFilter.getFriendlylinks();
	        Set<String> keys = friendlylinks.keySet();           // Get the set of keys held by the Map
            Iterator<String> i = keys.iterator();
            while(i.hasNext()) {
                String name = i.next();
    	        log.debug("FriendlyLink: " + name);
    	        
    	        FriendlyLink friendlylink = friendlylinks.get(name);
	            jspurl = new StringBuffer( friendlylink.convertToJsp(flink, params) );
	            if ( !"".equals(jspurl.toString()) ) break;     // we've found something
            }
	    }

        if (log.isDebugEnabled()) log.debug("Returning '" + jspurl.toString() + "'");
        return jspurl.toString();
	}
	
	/**
	 * Gets the path from a request
	 *
	 * @param  request The request
	 * @return path of the request or info left about path or null when nothing is found
	 */
	protected static String getPath(HttpServletRequest request) {
	   String path = request.getServletPath();
	   return path != null ? path : request.getPathInfo();
	}


    /**
     * Lists all cache entries, not just the cache entries of this nodetype
     * but all entries in UrlCache, by calling UrlCache#toString().
     *
     * @return  all cache entries
     */
    public String showCache() {
        UrlCache cache = UrlConverter.getCache();
        return cache.toString();
    }
    
    /** 
	 * To test the methods
	 *
	 * @param arg1    the first parameter
	 * @param arg2    the second parameter
	 * @return        <code>true</code> if something,  
	 *                <code>false</code> otherwise.
	 */
   public static void main(String args[]) {
      String testurl = "/start/geschiedenis.html";
      String context = "";
      if (!args[0].equals("")) testurl = args[0];
      if (!args[1].equals("")) context = args[1];
      System.out.println("Testing this URL :" + context + testurl);
      System.out.println("... converted into :" + convertUrl(context, testurl, ""));
   }

}
